@using BlazorComponentBus
@using AstroPanda.Blazor.Toolkit.Models;

@implements IDisposable

<MudMenu @ref="_contextMenu"
         ActivationEvent="MouseEvent.RightClick"
         PositionAtCursor="true"
         TransformOrigin="Origin.TopLeft"
         LockScroll="true"
         IsOpenChanged="HandleIsOpenedChanged">
    <ActivatorContent>
        @WrappedContent
    </ActivatorContent>
    <ChildContent>
        @MenuContent
    </ChildContent>
</MudMenu>

@code {
    [Inject]
    private ComponentBus _bus { get; set; }

    [Parameter]
    public RenderFragment WrappedContent { get; set; }

    [Parameter]
    public RenderFragment MenuContent { get; set; }

    private MudMenu _contextMenu { get; set; }

    private readonly Guid _id = Guid.NewGuid();

    protected override void OnInitialized()
    {
        _bus.Subscribe<ContextMenuOpenedMessage>(HandleContextMenuOpened);
    }

    private void HandleContextMenuOpened(MessageArgs args)
    {
        var message = args.GetMessage<ContextMenuOpenedMessage>();
        if (message.ContextMenuId != _id)
            _contextMenu.CloseMenu();
    }

    private void HandleIsOpenedChanged(bool isOpen)
    {
        if (isOpen)
            _bus.Publish(new ContextMenuOpenedMessage(_id));
    }

    public void Close() => _contextMenu.CloseMenu();

    public void Dispose()
    {
        _bus.UnSubscribe<ContextMenuOpenedMessage>(HandleContextMenuOpened);
    }
}
